import asyncio
from aiogram.types import Message
from config import TG_BOT_TOKEN
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from yandex_gpt_sdk import *


bot = Bot(token=TG_BOT_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.")


@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply("–Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start, /help, /set_profile.")


class ProfileSetup(StatesGroup):
    weight = State()
    height = State()
    age = State()
    activity = State()
    city = State()


async def ask_question(message: types.Message, state: FSMContext, question: str, next_state: State):
    await message.answer(question)
    await state.set_state(next_state)


def convert_to_valid_digit(value: str) -> float:
    value = value.strip().replace(',', '.')
    try:
        number = float(value)
        if number > 0:
            return number
        else:
            raise ValueError("–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    except ValueError:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")


@dp.message(Command("set_profile"))
async def cmd_set_profile(message: types.Message, state: FSMContext):
    await ask_question(message, state, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):", ProfileSetup.weight)


@dp.message(ProfileSetup.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        valid_message = convert_to_valid_digit(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return

    await state.update_data(weight=float(valid_message))
    await ask_question(message, state, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):", ProfileSetup.height)


@dp.message(ProfileSetup.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        valid_message = convert_to_valid_digit(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return

    await state.update_data(height=float(valid_message))
    await ask_question(message, state, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", ProfileSetup.age)


@dp.message(ProfileSetup.age)
async def process_age(message: types.Message, state: FSMContext):
    try:
        valid_message = convert_to_valid_digit(message.text)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return

    await state.update_data(age=float(valid_message))
    await ask_question(message, state, "–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?", ProfileSetup.activity)


@dp.message(ProfileSetup.activity)
async def process_activity(message: types.Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await ask_question(message, state, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?", ProfileSetup.city)


@dp.message(ProfileSetup.city)
async def process_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)

    user_data = await state.get_data()
    file_path = os.path.join(PATH_TO_BASE_USERS_INFO, str(message.from_user.id) + '.json')
    await StorageManager.save_json(
        file_path=file_path,
        data=user_data
    )
    response = (f"‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"üìå –í–µ—Å: {user_data['weight']} –∫–≥\n"
                f"üìè –†–æ—Å—Ç: {user_data['height']} —Å–º\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['activity']} –º–∏–Ω/–¥–µ–Ω—å\n"
                f"üåç –ì–æ—Ä–æ–¥: {user_data['city']}")

    await message.answer(response)
    await state.clear()


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())


