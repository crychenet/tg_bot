from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State

from config import *
from utils import *
from yandex_gpt_sdk import simple_request

suggest_meal_router = Router()


class MealSuggestionState(StatesGroup):
    waiting_for_goal = State()


@suggest_meal_router.message(Command("suggest_meal"))
async def suggest_meal_start(message: types.Message, state: FSMContext):
    await ask_question(message, state, "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ö—É–¥–µ—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å –≤–µ—Å? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä.",
                       MealSuggestionState.waiting_for_goal)


@suggest_meal_router.message(MealSuggestionState.waiting_for_goal)
async def suggest_meal_goal(message: types.Message, state: FSMContext):
    goal = message.text.lower().strip()

    if goal not in ["–ø–æ—Ö—É–¥–µ—Ç—å", "–Ω–∞–±—Ä–∞—Ç—å"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ: –ø–æ—Ö—É–¥–µ—Ç—å –∏–ª–∏ –Ω–∞–±—Ä–∞—Ç—å.")
        return

    user_id = message.from_user.id

    if not await file_exists_async(PATH_TO_BASE_USERS_INFO, f"{user_id}.json"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        return

    meal_suggestion = await simple_request(
        message=f"–ù–∞–ø–∏—à–∏ {goal} –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è",
        type_message="suggest_meal",
        user_id=user_id
    )

    suggested_meal = meal_suggestion.alternatives[0].text

    await message.answer(f"üçΩ *–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ ({goal}):*\n\n{suggested_meal}", parse_mode="Markdown")

    await state.clear()
