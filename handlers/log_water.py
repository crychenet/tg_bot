from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
import datetime
from config import *
from utils import *

log_water_router = Router()


class WaterLoggingState(StatesGroup):
    waiting_for_water_amount = State()


@log_water_router.message(Command("log_water"))
async def log_water_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã (–≤ –º–ª):")
    await state.set_state(WaterLoggingState.waiting_for_water_amount)


@log_water_router.message(WaterLoggingState.waiting_for_water_amount)
async def log_water_intake(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    file_path = os.path.join(PATH_TO_BASE_USERS_INFO, f"{user_id}.json")

    try:
        valid_message = convert_to_valid_digit(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
        return

    try:
        user_data = await StorageManager.load_json(file_path)
    except FileNotFoundError:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
        await state.clear()
        return

    date_now = str(datetime.date.today())
    user_data['water_logged'][date_now] += valid_message
    await StorageManager.save_json(file_path, user_data)

    water_to_norm_during_training = max(0, user_data["water_norm_training"] - user_data["water_logged"][date_now])
    water_to_norm_during_rest = max(0, user_data["water_norm_rest"] - user_data["water_logged"][date_now])

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {valid_message} –º–ª –≤–æ–¥—ã.\n"
                         f"üö∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏:\n"
                         f"  üíß –í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å: {water_to_norm_during_training:.2f} –º–ª\n"
                         f"  üíß –í –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å: {water_to_norm_during_rest:.2f} –º–ª\n")

    await state.clear()


# @log_router.message(Command("log_food"))
# async def log_food_intake(message: types.Message, state: FSMContext):
#     args = message.text.split(maxsplit=1)
#
#     if len(args) < 2:
#         await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞>")
#         return
#
#     food_name = args[1]
#     food_info = await get_food_info(food_name)
#
#     if not food_info:
#         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")
#         return
#
#     user_id = message.from_user.id
#     file_path = os.path.join(PATH_TO_BASE_USERS_INFO, f"{user_id}.json")
#     user_data = await StorageManager.load_json(file_path)
#
#     if not user_data:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
#         return
#
#     user_data.setdefault("calories_logged", 0)
#     user_data["calories_logged"] += food_info["calories"]
#
#     daily_calorie_goal = user_data.get("calorie_norm", 2000)
#     remaining_calories = max(daily_calorie_goal - user_data["calories_logged"], 0)
#
#     await StorageManager.save_json(file_path, user_data)
#
#     await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {food_info['name']}.\n"
#                          f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {food_info['calories']} –∫–∫–∞–ª.\n"
#                          f"‚ö° –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ü–µ–ª–∏: {remaining_calories:.2f} –∫–∫–∞–ª")
#
#
# @log_router.message(Command("log_workout"))
# async def log_workout(message: types.Message, state: FSMContext):
#     args = message.text.split(maxsplit=2)
#
#     if len(args) < 3 or not args[2].isdigit():
#         await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")
#         return
#
#     workout_type = args[1]
#     duration = int(args[2])
#
#     user_id = message.from_user.id
#     file_path = os.path.join(PATH_TO_BASE_USERS_INFO, f"{user_id}.json")
#     user_data = await StorageManager.load_json(file_path)
#
#     if not user_data:
#         await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile.")
#         return
#
#     weight = user_data.get("weight", 70)
#     burned_calories = await calculate_burned_calories(workout_type, duration, weight)
#
#     user_data.setdefault("calories_burned", 0)
#     user_data["calories_burned"] += burned_calories
#
#     await StorageManager.save_json(file_path, user_data)
#
#     await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_type}, {duration} –º–∏–Ω.\n"
#                          f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {burned_calories:.2f} –∫–∫–∞–ª")
#
